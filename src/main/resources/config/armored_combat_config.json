package com.iamfmgod.armoredcombatenhancer.modules.effects;

import net.minecraft.entity.EntityLivingBase;
import net.minecraft.init.MobEffects;
import net.minecraft.potion.Potion;
import net.minecraft.potion.PotionEffect;
import com.iamfmgod.armoredcombatenhancer.modules.compatibility.CompatibilityModule;
import vazkii.botania.common.potion.ModPotions;  // Botania
import com.brandon3055.draconicevolution.handlers.DEPotions;  // Draconic Evolution
import projecte.gameObjs.potions.PEPotions;  // ProjectE
import twilightforest.potions.TFPotions;  // Twilight Forest

import java.util.HashMap;
import java.util.Map;

/**
 * EffectsModule centralizes handling of dynamic effects and stacking,
 * including modded potion support.
 */
public class EffectsModule {
private static final int MAX_EFFECT_LEVEL = 5;
private static final Map<String, Potion> EFFECT_MAP = new HashMap<>();

static {
// Vanilla effects
EFFECT_MAP.put("bleeding",       MobEffects.POISON);
EFFECT_MAP.put("slowness",       MobEffects.SLOWNESS);
EFFECT_MAP.put("knockbackboost", MobEffects.WEAKNESS);
EFFECT_MAP.put("armorreduction", MobEffects.MINING_FATIGUE);
EFFECT_MAP.put("nightvision",    MobEffects.NIGHT_VISION);
EFFECT_MAP.put("levitation",     MobEffects.LEVITATION);
EFFECT_MAP.put("resistance",     MobEffects.RESISTANCE);
EFFECT_MAP.put("absorption",     MobEffects.ABSORPTION);
EFFECT_MAP.put("regeneration",   MobEffects.REGENERATION);

// Draconic Evolution
if (CompatibilityModule.isDraconicLoaded) {
EFFECT_MAP.put("aetherstagger", DEPotions.stagger);
EFFECT_MAP.put("flightboost",   DEPotions.storage);
}

// Botania
if (CompatibilityModule.isBotaniaLoaded) {
EFFECT_MAP.put("thornsaura", ModPotions.thornprotect);
EFFECT_MAP.put("manaregenboost", ModPotions.manaRegen);
}

// ProjectE
if (CompatibilityModule.isProjectELoaded) {
EFFECT_MAP.put("timeslowfield", PEPotions.time);
EFFECT_MAP.put("energyrip",      PEPotions.darkMatter);
}

// Twilight Forest
if (CompatibilityModule.isTwilightForestLoaded) {
EFFECT_MAP.put("fortitude",    TFPotions.knightmetal);
EFFECT_MAP.put("ignite",       TFPotions.fire);
}
}

/**
 * Adds or refreshes a dynamic effect on the given entity.
 * Handles "stun" specially via StunHandler.
 */
public static void addOrRefreshEffect(EntityLivingBase entity, String effectName, int duration, int level) {
if (effectName == null) return;
String key = effectName.toLowerCase();

// Special: true stun
if ("stun".equals(key)) {
StunHandler.applyStun(entity, duration);
return;
}

Potion potion = EFFECT_MAP.get(key);
if (potion == null) {
System.err.println("[A.C.E.] Unknown effect: " + effectName);
return;
}

int amp = Math.min(Math.max(level - 1, 0), MAX_EFFECT_LEVEL - 1);
PotionEffect incoming = new PotionEffect(potion, duration, amp);

PotionEffect existing = entity.getActivePotionEffect(potion);
if (existing != null) {
int finalAmp = Math.max(existing.getAmplifier(), incoming.getAmplifier());
int finalDur = Math.max(existing.getDuration(), incoming.getDuration());
entity.removePotionEffect(potion);
entity.addPotionEffect(new PotionEffect(potion, finalDur, finalAmp));
} else {
entity.addPotionEffect(incoming);
}
}

/**
 * Register additional custom effect at runtime.
 */
public static void registerCustomEffect(String name, Potion potion) {
if (name != null && potion != null) {
EFFECT_MAP.put(name.toLowerCase(), potion);
}
}
}